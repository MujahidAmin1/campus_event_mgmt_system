import 'dart:core';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart' as firebase_auth;
import 'package:campus_event_mgmt_system/core/providers.dart';
import 'package:campus_event_mgmt_system/features/auth/view/auth_screen.dart';
import 'package:campus_event_mgmt_system/features/events/view/events_screen.dart';
import 'package:campus_event_mgmt_system/features/events/view/admin_events_screen.dart';
import 'package:campus_event_mgmt_system/features/auth/controller/auth_controller.dart';
import 'package:campus_event_mgmt_system/core/widgets/loading_screen.dart';
import 'firebase_options.dart'; // Generated by FlutterFire CLI

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runApp(const ProviderScope(child: MyApp()));
}

class MyApp extends ConsumerStatefulWidget {
  const MyApp({super.key});

  @override
  ConsumerState<MyApp> createState() => _MyAppState();
}

class _MyAppState extends ConsumerState<MyApp> {
  @override
  void initState() {
    super.initState();
    // Initialize auth controller when app starts
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref.read(authControllerProvider.notifier).getCurrentUser();
    });
  }

  @override
  Widget build(BuildContext context) {
    final authState = ref.watch(authStateProvider);

    return MaterialApp(
      title: 'Campus Event Management',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
        useMaterial3: true,
      ),
      home: authState.when(
        data: (firebaseUser) => _buildHome(firebaseUser, ref),
        loading: () => const LoadingScreen(
          message: 'Checking authentication...',
          subtitle: 'Please wait',
        ),
        error: (error, _) => Scaffold(
          body: Center(child: Text('Error: $error')),
        ),
      ),
    );
  }

  Widget _buildHome(firebase_auth.User? firebaseUser, WidgetRef ref) {
    if (firebaseUser == null) {
      return const AuthScreen();
    }

    // Watch auth controller state to get the full user object
    final authControllerState = ref.watch(authControllerProvider);
    final role = ref.watch(userRoleProvider);

    return authControllerState.when(
      data: (user) {
        if (user == null) {
          // User is authenticated in Firebase but not in our controller yet
          return const LoadingScreen(
            message: 'Loading user data...',
            subtitle: 'Please wait',
          );
        }
        
        // Navigate based on role
        switch (role) {
          case UserRole.admin:
            return const AdminEventsScreen();
          default:
            return const EventsScreen();
        }
      },
      loading: () => const LoadingScreen(
        message: 'Loading user data...',
        subtitle: 'Please wait',
      ),
      error: (error, _) => const AuthScreen(), // Fallback to auth screen on error
    );
  }
}

/// Stream provider for FirebaseAuth user
final authStateProvider = StreamProvider<firebase_auth.User?>(
  (ref) => firebase_auth.FirebaseAuth.instance.authStateChanges(),
);